// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(uuid())
  uid           String         @unique
  name          String
  role          Role           @default(STUDENT)
  passingYear   Int
  admissionYear Int
  linkedInURL   String
  githubURL     String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  student       Student?
  alumni        Alumni?
  adminOfGroup  Group[]        @relation("admin")
  groups        GroupMember[]
  participant1  Conversation[] @relation("participant1")
  participant2  Conversation[] @relation("participant2")
  messages      Message[]
}

model Student {
  id         String @id @default(uuid())
  email      String
  semester   Int
  rollNumber String
  user       User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String @unique
}

model Alumni {
  id               String @id @default(uuid())
  email            String
  documentURL      String
  documentPublicId String
  user             User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           String @unique
}

model Group {
  id        String        @id @default(uuid())
  name      String
  admin     User          @relation("admin", fields: [adminId], references: [id], onDelete: Cascade)
  adminId   String
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  members   GroupMember[]
  messages  Message[]
}

model GroupMember {
  group   Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String

  @@id([groupId, userId])
}

model Conversation {
  id             String    @id @default(uuid())
  participant1   User      @relation("participant1", fields: [participant1Id], references: [id], onDelete: Cascade)
  participant1Id String
  participant2   User      @relation("participant2", fields: [participant2Id], references: [id], onDelete: Cascade)
  participant2Id String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  messages       Message[]

  @@unique([participant1Id, participant2Id])
}

model Message {
  id             String        @id @default(uuid())
  content        String
  type           MessageType
  targetType     TargerType
  uploadURL      String?
  uploadPublicId String?
  sender         User          @relation(fields: [senderId], references: [id], onDelete: Cascade)
  senderId       String
  group          Group?        @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId        String?
  conversation   Conversation? @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId String?
  reply          Message?      @relation("Replies", fields: [replyId], references: [id], onDelete: Cascade)
  replyId        String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  replies        Message[]     @relation("Replies")
}

enum MessageType {
  TEXT
  FILE
  IMAGE
  AUDIO
  VIDEO
}

enum TargerType {
  CONVERSATION
  GROUP
}

enum Role {
  ALUMNI
  STUDENT
}
